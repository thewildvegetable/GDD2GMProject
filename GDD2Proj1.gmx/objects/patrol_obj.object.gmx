<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>patrol_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initialize movement position
direct = -1;
horizontalSpeed = 3;
verticalSpeed = 0;
leftX = x - 100;     //how far left this moves
rightX = x;         //how far right this moves
timer = 0;
firing = false;  //check if this has been fired
shootTimer = 0;   

maxHP = 2;
hitP = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//increment timer
timer++;

if (firing){
    shootTimer++;
}

if (shootTimer &gt; 40){
    firing = false;
    shootTimer = 0;
}

//set vertical speed
verticalSpeed = (min(7, verticalSpeed + .07));      //apply gravity

//horizontal collison with wall
if (place_meeting(round(x + (direct * horizontalSpeed)), round(y), obj_blackTerrain)){
    //if the collision with wall is on the right edit rightX to be this and change leftX
    if (direct &gt; 0){
        leftX = x - 100;     //how far left this moves
        rightX = x;         //how far right this moves
    }
    //if the collision with wall is on the right edit leftX to be this and change rightX
    else if (direct &lt; 0){
        leftX = x;     //how far left this moves
        rightX = x + 100;         //how far right this moves
    }
    direct *= -1;
    image_xscale *= -1;
}

//vertical collison with wall
if (place_meeting(round(x), round(y + verticalSpeed), obj_blackTerrain)){
    verticalSpeed = 0;
}

//avoid falling
if (!place_meeting(round(x + (direct * horizontalSpeed)), round(y + 1), obj_blackTerrain)){
    if (direct &gt; 0){
        leftX = x - 100;     //how far left this moves
        rightX = x;         //how far right this moves
    }
    //if the collision with wall is on the right edit leftX to be this and change rightX
    else if (direct &lt; 0){
        leftX = x;     //how far left this moves
        rightX = x + 100;         //how far right this moves
    }
    direct *= -1;
    image_xscale *= -1;
}

//move object
x += direct * horizontalSpeed;
y += verticalSpeed;

//check if need to turn around
if (x &lt; leftX || x &gt; rightX){
    direct *= -1;
    image_xscale *= -1;
}

//fire bullet at player
if (distance_to_object(dude_obj) &lt; 128 &amp;&amp; sign(dude_obj.x - x) == sign(direct)){
    if (!firing){
        for (i = -1; i &lt; 2; i++){
            bullet = instance_create(x + sign(direct), y, turretBullet_obj);
            bullet.direction = point_direction(x, y, x + cos(degtorad(15 * i)), y + sin(degtorad(15 * i)));
            bullet.speed = 5 * sign(direct);
        }
        firing = true;
    }
}
<<<<<<< HEAD
=======
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bigblast">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if colliding with player bullet then destroy this
hitP--;
if(hitP &lt;= 0)
{
    instance_destroy();
}
>>>>>>> origin/FinalPlaytestVersion
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_blasterShot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if colliding with player bullet then destroy this
hitP--;
if(hitP &lt;= 0)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
var perc;//the percent health to display
perc=(hitP/maxHP)*100;
draw_healthbar(x-16,y-24,x+16,y-20,perc,c_black,c_red,c_green,0,true,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
